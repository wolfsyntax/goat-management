<?php echo validation_errors(); ?>





$this->form_validation->set_rules('username', 'Username', 'required');
$this->form_validation->set_rules('password', 'Password', 'required');
$this->form_validation->set_rules('passconf', 'Password Confirmation', 'required');
$this->form_validation->set_rules('email', 'Email', 'required');





$this->form_validation->set_rules(
        'username', 'Username',
        'required|min_length[5]|max_length[12]|is_unique[users.username]',
        array(
                'required'      => 'You have not provided %s.',
                'is_unique'     => 'This %s already exists.'
        )
);
$this->form_validation->set_rules('password', 'Password', 'required');
$this->form_validation->set_rules('passconf', 'Password Confirmation', 'required|matches[password]');
$this->form_validation->set_rules('email', 'Email', 'required|valid_email|is_unique[users.email]');




PREPPING DATA


$this->form_validation->set_rules('username', 'Username', 'trim|required|min_length[5]|max_length[12]');
$this->form_validation->set_rules('password', 'Password', 'trim|required|min_length[8]');
$this->form_validation->set_rules('passconf', 'Password Confirmation', 'trim|required|matches[password]');
$this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email');






Re-populating the form

<input type="text" name="username" value="<?php echo set_value('username'); ?>" size="50" />






$this->form_validation->set_rules('username', 'Username', 'callback_username_check');
$this->form_validation->set_rules('password', 'Password', 'required');
$this->form_validation->set_rules('passconf', 'Password Confirmation', 'required');
$this->form_validation->set_rules('email', 'Email', 'required|is_unique[users.email]');







<?php

class Form extends CI_Controller {

        public function index()
        {
                $this->load->helper(array('form', 'url'));

                $this->load->library('form_validation');

                $this->form_validation->set_rules('username', 'Username', 'callback_username_check');
                $this->form_validation->set_rules('password', 'Password', 'required');
                $this->form_validation->set_rules('passconf', 'Password Confirmation', 'required');
                $this->form_validation->set_rules('email', 'Email', 'required|is_unique[users.email]');

                if ($this->form_validation->run() == FALSE)
                {
                        $this->load->view('myform');
                }
                else
                {
                        $this->load->view('formsuccess');
                }
        }

        public function username_check($str)
        {
                if ($str == 'test')
                {
                        $this->form_validation->set_message('username_check', 'The {field} field can not be the word "test"');
                        return FALSE;
                }
                else
                {
                        return TRUE;
                }
        }

}










$this->form_validation->set_rules(
        'username', 'Username',
        array(
                'required',
                function($value)
                {
                        // Check $value
                }
        )
);





















$this->form_validation->set_message('min_length', '{field} must have at least {param} characters.');
















<?php echo form_error('field name', '<div class="error">', '</div>'); ?>















Changing the Error Delimiters
By default, the Form Validation class adds a paragraph tag (<p>) around each error message shown. You can either change these delimiters globally, individually, or change the defaults in a config file.

Changing delimiters Globally To globally change the error delimiters, in your controller method, just after loading the Form Validation class, add this:

$this->form_validation->set_error_delimiters('<div class="error">', '</div>');
In this example, we’ve switched to using div tags.

Changing delimiters Individually Each of the two error generating functions shown in this tutorial can be supplied their own delimiters as follows:

<?php echo form_error('field name', '<div class="error">', '</div>'); ?>
Or:

<?php echo validation_errors('<div class="error">', '</div>'); ?>
Set delimiters in a config file You can add your error delimiters in application/config/form_validation.php as follows:

$config['error_prefix'] = '<div class="error_prefix">';
$config['error_suffix'] = '</div>';
Showing Errors Individually
If you prefer to show an error message next to each form field, rather than as a list, you can use the form_error() function.

Try it! Change your form so that it looks like this:

<h5>Username</h5>
<?php echo form_error('username'); ?>
<input type="text" name="username" value="<?php echo set_value('username'); ?>" size="50" />

<h5>Password</h5>
<?php echo form_error('password'); ?>
<input type="text" name="password" value="<?php echo set_value('password'); ?>" size="50" />

<h5>Password Confirm</h5>
<?php echo form_error('passconf'); ?>
<input type="text" name="passconf" value="<?php echo set_value('passconf'); ?>" size="50" />

<h5>Email Address</h5>
<?php echo form_error('email'); ?>
<input type="text" name="email" value="<?php echo set_value('email'); ?>" size="50" />
If there are no errors, nothing will be shown. If there is an error, the message will appear.


























Rule Reference
The following is a list of all the native rules that are available to use:

Rule	Parameter	Description	Example
required	No	Returns FALSE if the form element is empty.	 
matches	Yes	Returns FALSE if the form element does not match the one in the parameter.	matches[form_item]
regex_match	Yes	Returns FALSE if the form element does not match the regular expression.	regex_match[/regex/]
differs	Yes	Returns FALSE if the form element does not differ from the one in the parameter.	differs[form_item]
is_unique	Yes	Returns FALSE if the form element is not unique to the table and field name in the parameter. Note: This rule requires Query Builder to be enabled in order to work.	is_unique[table.field]
min_length	Yes	Returns FALSE if the form element is shorter than the parameter value.	min_length[3]
max_length	Yes	Returns FALSE if the form element is longer than the parameter value.	max_length[12]
exact_length	Yes	Returns FALSE if the form element is not exactly the parameter value.	exact_length[8]
greater_than	Yes	Returns FALSE if the form element is less than or equal to the parameter value or not numeric.	greater_than[8]
greater_than_equal_to	Yes	Returns FALSE if the form element is less than the parameter value, or not numeric.	greater_than_equal_to[8]
less_than	Yes	Returns FALSE if the form element is greater than or equal to the parameter value or not numeric.	less_than[8]
less_than_equal_to	Yes	Returns FALSE if the form element is greater than the parameter value, or not numeric.	less_than_equal_to[8]
in_list	Yes	Returns FALSE if the form element is not within a predetermined list.	in_list[red,blue,green]
alpha	No	Returns FALSE if the form element contains anything other than alphabetical characters.	 
alpha_numeric	No	Returns FALSE if the form element contains anything other than alpha-numeric characters.	 
alpha_numeric_spaces	No	Returns FALSE if the form element contains anything other than alpha-numeric characters or spaces. Should be used after trim to avoid spaces at the beginning or end.	 
alpha_dash	No	Returns FALSE if the form element contains anything other than alpha-numeric characters, underscores or dashes.	 
numeric	No	Returns FALSE if the form element contains anything other than numeric characters.	 
integer	No	Returns FALSE if the form element contains anything other than an integer.	 
decimal	No	Returns FALSE if the form element contains anything other than a decimal number.	 
is_natural	No	Returns FALSE if the form element contains anything other than a natural number: 0, 1, 2, 3, etc.	 
is_natural_no_zero	No	Returns FALSE if the form element contains anything other than a natural number, but not zero: 1, 2, 3, etc.	 
valid_url	No	Returns FALSE if the form element does not contain a valid URL.	 
valid_email	No	Returns FALSE if the form element does not contain a valid email address.	 
valid_emails	No	Returns FALSE if any value provided in a comma separated list is not a valid email.	 
valid_ip	Yes	Returns FALSE if the supplied IP address is not valid. Accepts an optional parameter of ‘ipv4’ or ‘ipv6’ to specify an IP format.	 
valid_base64	No	Returns FALSE if the supplied string contains anything other than valid Base64 characters.	 
Note

These rules can also be called as discrete methods. For example:

$this->form_validation->required($string);
Note

You can also use any native PHP functions that permit up to two parameters, where at least one is required (to pass the field data).

Prepping Reference
The following is a list of all the prepping methods that are available to use:

Name	Parameter	Description
prep_for_form	No	DEPRECATED: Converts special characters so that HTML data can be shown in a form field without breaking it.
prep_url	No	Adds “http://” to URLs if missing.
strip_image_tags	No	Strips the HTML from image tags leaving the raw URL.
encode_php_tags	No	Converts PHP tags to entities.





























<input type="radio" name="myradio" value="1" <?php echo  set_radio('myradio', '1', TRUE); ?> />
<input type="radio" name="myradio" value="2" <?php echo  set_radio('myradio', '2'); ?> />




<input type="checkbox" name="mycheck" value="1" <?php echo set_checkbox('mycheck', '1'); ?> />
<input type="checkbox" name="mycheck" value="2" <?php echo set_checkbox('mycheck', '2'); ?> />



<select name="myselect">
        <option value="one" <?php echo  set_select('myselect', 'one', TRUE); ?> >One</option>
        <option value="two" <?php echo  set_select('myselect', 'two'); ?> >Two</option>
        <option value="three" <?php echo  set_select('myselect', 'three'); ?> >Three</option>
</select>



<input type="text" name="quantity" value="<?php echo set_value('quantity', '0'); ?>" size="50" />




















required // Returns FALSE if the form field is empty.

matches // Returns FALSE if the form field does not match the defined value of parameter.

is_unique // Returns FALSE if the form field is not unique to the table and field name in the parameter.

min_length // Returns FALSE if the form field is shorter than the parameter value.

max_length // Returns FALSE if the form field is longer than the parameter value.

exact_length // Returns FALSE if the form field is not exactly the parameter value.

greater_than // Returns FALSE if the form field is less than the parameter value or not numeric.

less_than // Returns FALSE if the form field is greater than the parameter value or not numeric.

alpha // Returns FALSE if the form field contains anything other than alphabetical characters.

alpha_numeric // Returns FALSE if the form field contains anything other than alpha-numeric characters.

alpha_dash // Returns FALSE if the field contains anything other than alpha-numeric characters, underscores or dashes.

numeric // Returns FALSE if the form field contains anything other than numeric characters.

integer // Returns FALSE if the form field contains anything other than an integer.

decimal // Returns FALSE if the form field contains anything other than a decimal number.

is_natural // Returns FALSE if the form field contains anything other than a natural number.

is_natural_no_zero // Returns FALSE if the form field contains anything other than a natural number, but not zero.

valid_email // Returns FALSE if the form field does not contain a valid email address.

valid_emails // Returns FALSE if any value provided in a comma separated list is not a valid email.

valid_ip // Returns FALSE if the supplied IP is not valid.

valid_base64 // Returns FALSE if the supplied string contains anything other than valid Base64 characters.

























$this->session->set_flashdata('item', 'form submitted successfully');
            redirect(current_url());













class Blog_model extends CI_Model {

        public $title;
        public $content;
        public $date;

        public function get_last_ten_entries()
        {
                $query = $this->db->get('entries', 10);
                return $query->result();
        }

        public function insert_entry()
        {
                $this->title    = $_POST['title']; // please read the below note
                $this->content  = $_POST['content'];
                $this->date     = time();

                $this->db->insert('entries', $this);
        }

        public function update_entry()
        {
                $this->title    = $_POST['title'];
                $this->content  = $_POST['content'];
                $this->date     = time();

                $this->db->update('entries', $this, array('id' => $_POST['id']));
        }

}
            









<div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
  <ol class="carousel-indicators">
    <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
    <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
    <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
  </ol>
  <div class="carousel-inner">
    <div class="carousel-item active">
      <img class="d-block w-100" src=".../800x400?auto=yes&bg=777&fg=555&text=First slide" alt="First slide">
    </div>
    <div class="carousel-item">
      <img class="d-block w-100" src=".../800x400?auto=yes&bg=666&fg=444&text=Second slide" alt="Second slide">
    </div>
    <div class="carousel-item">
      <img class="d-block w-100" src=".../800x400?auto=yes&bg=555&fg=333&text=Third slide" alt="Third slide">
    </div>
  </div>
  <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="sr-only">Previous</span>
  </a>
  <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="sr-only">Next</span>
  </a>
</div>